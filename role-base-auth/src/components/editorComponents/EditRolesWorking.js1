import React, { useEffect, useRef, useState } from "react";
import axios from "../../api/axios";
import Popup from "../Popup";
import { v4 as uuidv4 } from "uuid";
import { useNavigate } from "react-router-dom";

const GETALLROLES = "/api/roles";
const EDIT_ROLE_PERMISSIONS = "/api/editrolepermissions";
const DELETE_ROLE = "/api/deleterole";

const EditRoles = () => {
  const navigate = useNavigate();
  const [roles, setRoles] = useState(null);
  const [permissionWindow, setPermissionWindow] = useState(false);
  const [roleSelected, setRoleSelected] = useState(null);
  const wrapperRef = useRef(null);
  const [selectedOptions, setSelectedOptions] = useState({});
  const [editingCell, setEditingCell] = useState(null);

  // Create refs for each td element
  const tdRefs = useRef([]);

  useEffect(() => {
    axios
      .get(GETALLROLES)
      .then((response) => {
        setRoles(response.data);
      })
      .catch((error) => {
        console.error("Error:", error);
      });
  }, [roles]);

  useEffect(() => {
    function handleClickOutside(event) {
      if (wrapperRef.current && !wrapperRef.current.contains(event.target)) {
        setPermissionWindow(false);
      }
    }
    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [wrapperRef]);

  useEffect(() => {
    if (editingCell) {
      tdRefs.current[editingCell.row]?.focus();
    }
  }, [editingCell]);

  const showPermissionsHandler = (roleSelected) => {
    setRoleSelected(roleSelected);
    setPermissionWindow(true);
  };

  const handleDropdownChange = (event, roleId) => {
    const { value } = event.target;
    setSelectedOptions((prevSelectedOptions) => ({
      ...prevSelectedOptions,
      [roleId]: value,
    }));
  };

  const handleClickDropdownButton = async (roleId, rowIndex) => {
    const value = selectedOptions[roleId] || "option1";
    switch (value) {
      case "option1":
        navigate("/superuserform");
        break;
      case "option2":
        setEditingCell({ row: rowIndex, col: 1 });
        break;
      case "option3":
        break;
      case "option4":
        await axios.post(DELETE_ROLE, JSON.stringify({roleId}));
        setRoles(null);
        break;
      default:
        break;
    }
  };

  const handleBlur = async (target, id) => {
    setEditingCell(null);
    const data = target.parentElement.firstElementChild.textContent;
    if (data.trim() !== "") {
      const dataToSend = { id: id, rolename: data, permissions: null };
      await axios.post(EDIT_ROLE_PERMISSIONS, JSON.stringify(dataToSend));
      setRoles(null);
    }
  };

  const options = {
    year: "numeric",
    month: "long",
    day: "numeric",
    hour: "2-digit",
    minute: "2-digit",
    second: "2-digit",
  };

  return (
    <div className="maintablediv">
      {!permissionWindow && (
        <table>
          <thead>
            <tr>
              <th>Role Name</th>
              <th>Creation Date time</th>
              <th>Created By</th>
              <th>Permissions</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {roles?.map(
              (
                { id, role, role_datetime, createdby, permissions },
                rowIndex
              ) => {
                const date = new Date(role_datetime);
                tdRefs.current[rowIndex] = tdRefs.current[rowIndex] || [];
                return (
                  <tr key={id}>
                    <td>
                      {editingCell?.row === rowIndex &&
                      editingCell?.col === 1 ? (
                        <div
                          ref={(el) => (tdRefs.current[rowIndex] = el)}
                          contentEditable
                          onBlur={(e) => handleBlur(e.target, id)}
                        ></div>
                      ) : (
                        role
                      )}
                    </td>
                    <td>{date.toLocaleDateString("en-US", options)}</td>
                    <td>{createdby}</td>
                    <td>
                      <button
                        type="button"
                        onClick={() =>
                          showPermissionsHandler({ role, permissions })
                        }
                      >
                        View
                      </button>
                    </td>
                    <td>
                      <div>
                        <label htmlFor={id}>Select an option:</label>
                        <select
                          id={id}
                          value={selectedOptions[id] || "option1"}
                          onChange={(e) => handleDropdownChange(e, id)}
                        >
                          <option value="option1">Assign/Create</option>
                          <option value="option2">Update name</option>
                          <option value="option3">Update perms</option>
                          <option value="option4">Delete role</option>
                        </select>
                        <button
                          type="button"
                          onClick={() =>
                            handleClickDropdownButton(id, rowIndex)
                          }
                        >
                          Execute
                        </button>
                      </div>
                    </td>
                  </tr>
                );
              }
            )}
          </tbody>
        </table>
      )}
      <Popup trigger={permissionWindow}>
        <div className="test" ref={wrapperRef}>
          <h1>{roleSelected?.role}</h1>
          {roleSelected?.permissions.map((permission) => (
            <p key={uuidv4()}>{permission}</p>
          ))}
          <br />
          <span>
            Click outside the inner box to navigate back to the roles page
          </span>
        </div>
      </Popup>
    </div>
  );
};

export default EditRoles;
